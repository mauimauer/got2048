File secretPropsFile = file('../secret.properties');
Properties secretProps = new Properties();

if (secretPropsFile.exists()) {
    logger.info("DeployGate API configured using properties at '" + secretPropsFile.getAbsolutePath() + "'")
    secretProps.load(new FileInputStream(secretPropsFile))
} else {
    logger.warn("DeployGate API not configured, tasks won't be available. Please make sure the API secrects file exists at '" + secretPropsFile.getAbsolutePath() + "'")

}

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 19
        versionCode 11
        versionName "0.8"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }

    buildTypes {

        debug {
            versionNameSuffix "-DEBUG"
        }

        beta.initWith(debug)
        beta {
            versionNameSuffix "-BETA"
            packageNameSuffix ".beta"
        }

        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    wearApp project(':wear')
    compile 'com.android.support:support-v4:+'
    compile 'junit:junit:3.+'
    compile 'com.jakewharton:butterknife:4.+'
    compile 'com.deploygate:sdk:3.1'
    compile fileTree(dir: 'libs', include: ['*.jar'])
}


if (secretProps.containsKey("DEPLOYGATE_USERNAME") && secretProps.containsKey("DEPLOYGATE_TOKEN")) {

    apply plugin: 'deploygate'

    project.configure(deploygate, {
        userName = secretProps.get("DEPLOYGATE_USERNAME")
        token = secretProps.get("DEPLOYGATE_TOKEN")

        apks {
            beta {
                sourceFile = file("build/apk/app-beta-unaligned.apk")

                def betaComment = secretProps.get("DEPLOYGATE_RELEASE_NOTES")
                if (betaComment != null && betaComment.length() > 0) {
                    releaseNote = betaComment
                    message = betaComment
                }

                if (secretProps.containsKey("DEPLOYGATE_DISTRIBUTION_ID")) {
                    distributionKey = secretProps.get("DEPLOYGATE_DISTRIBUTION_ID")
                }
            }
        }
    })

}

def getReleaseNotes(flavor) {

    return readLine('> Please enter the release notes for flavor [' + flavor + ']: ')
}

// workaround to Windows not having System.console
def readLine(String format, Object... args) throws IOException {
    if (System.console() != null) {
        return System.console().readLine(format, args);
    }
    println(String.format(format, args))
    BufferedReader reader = new BufferedReader(new InputStreamReader(
            System.in));
    return reader.readLine();
}
